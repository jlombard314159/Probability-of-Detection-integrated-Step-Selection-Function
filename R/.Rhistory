habitatDFSub <- as.data.frame(habitatDF[, colnames(habitatDF) %in%
iSSFCovars])
matrixList <- list()
for (i in 1:ncol(habitatDFSub)) {
matrixList[[i]] <- matrix(habitatDFSub[, i], nrow = nCells,
ncol = nCells, byrow = T)
}
if (!is.null(distMatrix) & (any(c("distance", "DISTANCE",
"dist", "DIST", "Distance") %in% iSSFCovars))) {
matrixList[[length(matrixList) + 1]] <- distMatrix
}
vectorToConvert <- c()
for (i in 1:length(matrixList)) {
vectorToConvert[i] <- paste("matrixList[[", i, "]]",
sep = "")
}
formulaRest <- paste("~", paste(vectorToConvert, collapse = "+"))
selectionFormula <- as.formula(formulaRest)
}
if (is.null(probDetCovars)) {
probDetFormula <- NULL
} else {
logisticSub <- as.data.frame(habitatDF[, colnames(habitatDF) %in%
probDetCovars])
vectorToConvert <- c()
for (i in 1:ncol(logisticSub)) {
vectorToConvert[i] <- paste("logisticSub[,", i, "]",
sep = "")
}
finalFormula <- paste("~ 1 +", paste(vectorToConvert,
collapse = "+"))
probDetFormula <- as.formula(finalFormula)
}
# For PDiSSFModel
selection = selectionFormula
p = probDetFormula
locations = CellID
ncells = nCells
maxLagArg = maxLagArg
iSSFCovar = iSSFCovars
LogCovar = c("Intercept", probDetCovars)
if (missing(selection))
stop("Model for habitat selection must be specified")
if (missing(p))
stop("Model for p (encounter probabilities) must be specified")
if (missing(locations))
stop("Animal locations must be specified")
if (max(locations, na.rm = T) > ncells)
stop("Cell ID #s are not correct")
if (!is.numeric(locations)) # Consider moving one above
stop("Cell ID #s are not numeric")
head(locations)
CellID
CellID = locations$unit.id
CellID
str(locations)
data(locations); head(locations)
CellID = locations$unit.id
iSSFCovars = c("distance", "prcnt.sage", "elevation")
probDetCovars = "prcnt.sage"
distColumns = c("utmX","utmY")
maxLagArg = 3
nCells <- nrow(habitatDF)
if (!is.data.frame(habitatDF)) {
stop(paste("habitatDF should be a data frame."))
}
factorHabitat <- sapply(habitatDF, is.factor)
factorHabitat <- factorHabitat[!(factorHabitat == FALSE)]
toConvertHabitat <- names(factorHabitat)
factorDF <- as.data.frame(habitatDF[, colnames(habitatDF) %in%
toConvertHabitat])
habitatDF <- habitatDF[,sort(names(habitatDF))] # just added
# iSSFCovars <- sort(iSSFCovars) # just added
# if(sum(iSSFCovars == "distance") == 1){ # just added
#   iSSFCovars <- c(iSSFCovars[iSSFCovars != "distance"], "distance")
# }
if (ncol(factorDF) > 0) {
factorDFList <- list()
for (i in 1:ncol(factorDF)) {
mm <- model.matrix(~factorDF[, i] - 1, model.frame(~factorDF[,
i] - 1), contrasts = FALSE)
factorDFList[[i]] <- cbind(mm[, 2:ncol(mm)])
colnames(factorDFList[[i]]) <- gsub(".*]", "", colnames(factorDFList[[i]]))
}
newDF <- do.call(cbind.data.frame, factorDFList)
if (toConvertHabitat %in% iSSFCovars) {
iSSFCovars <- iSSFCovars[!iSSFCovars == toConvertHabitat]
iSSFCovars <- c(iSSFCovars, colnames(newDF))
}
if (toConvertHabitat %in% probDetCovars) {
probDetCovars <- probDetCovars[!probDetCovars ==
toConvertHabitat]
probDetCovars <- c(probDetCovars, colnames(newDF))
}
habitatDF <- habitatDF[, !(colnames(habitatDF) %in% toConvertHabitat)]
habitatDF <- cbind(habitatDF, newDF)
}
distMatrix <- as.matrix(x = stats::dist(cbind(habitatDF[, # why do this if you don't have to ?
colnames(habitatDF) %in% distColumns[1]], habitatDF[,
colnames(habitatDF) %in% distColumns[2]])))
if (is.null(iSSFCovars)) {
stop("A covariate must be specific for the iSSF")
} else {
habitatDFSub <- as.data.frame(habitatDF[, colnames(habitatDF) %in%
iSSFCovars])
matrixList <- list()
for (i in 1:ncol(habitatDFSub)) {
matrixList[[i]] <- matrix(habitatDFSub[, i], nrow = nCells,
ncol = nCells, byrow = T)
}
if (!is.null(distMatrix) & (any(c("distance", "DISTANCE",
"dist", "DIST", "Distance") %in% iSSFCovars))) {
matrixList[[length(matrixList) + 1]] <- distMatrix
}
vectorToConvert <- c()
for (i in 1:length(matrixList)) {
vectorToConvert[i] <- paste("matrixList[[", i, "]]",
sep = "")
}
formulaRest <- paste("~", paste(vectorToConvert, collapse = "+"))
selectionFormula <- as.formula(formulaRest)
}
if (is.null(probDetCovars)) {
probDetFormula <- NULL
} else {
logisticSub <- as.data.frame(habitatDF[, colnames(habitatDF) %in%
probDetCovars])
vectorToConvert <- c()
for (i in 1:ncol(logisticSub)) {
vectorToConvert[i] <- paste("logisticSub[,", i, "]",
sep = "")
}
finalFormula <- paste("~ 1 +", paste(vectorToConvert,
collapse = "+"))
probDetFormula <- as.formula(finalFormula)
}
CellID
# For PDiSSFModel
selection = selectionFormula
p = probDetFormula
locations = CellID
ncells = nCells
maxLagArg = maxLagArg
iSSFCovar = iSSFCovars
LogCovar = c("Intercept", probDetCovars)
if (missing(selection))
stop("Model for habitat selection must be specified")
if (missing(p))
stop("Model for p (encounter probabilities) must be specified")
if (missing(locations))
stop("Animal locations must be specified")
if (max(locations, na.rm = T) > ncells)
stop("Cell ID #s are not correct")
if (!is.numeric(locations)) # Consider moving one above
stop("Cell ID #s are not numeric")
orig.call <- match.call()
iSSF.mod.mat <- getModMatrix(selection, ncells)
X.iSSF <- iSSF.mod.mat$X
k.iSSF <- iSSF.mod.mat$n.covars
if (is.null(p)) {
strt.vals <- rep(0, k.iSSF)
out <- nlminb(start = strt.vals, objective = iSSFLogLike,
X1 = X.iSSF, locations = locations, k1 = k.iSSF)
hessian = F.2nd.deriv(out$par, iSSFLogLike, X1 = X.iSSF,
locations = locations, k1 = k.iSSF)
SEs <- sqrt(diag(solve(hessian)))
iSSF.coefs <- out$par[1:k.iSSF]
iSSFDataframe <- data.frame(Covar = iSSFCovar, Coef = iSSF.coefs,
SE = SEs[1:k.iSSF])
ans <- list(loglik = -out$objective, convergence = out$convergence,
call = orig.call, ncells = ncells, n.fix.attempts = length(locations),
iSSF = iSSFDataframe, aic = 2 * out$objective + 2 *
(k.iSSF), bic = 2 * out$objective + (k.iSSF) *
log(sum(!is.na(locations)) - 1))
class(ans) <- "iSSF"
return(ans)
}
p
p.mod.mat <- getModMatrix(p, ncells)
X.p <- p.mod.mat$X
k.p <- p.mod.mat$n.covars
strt.vals <- rep(0, k.iSSF + k.p)
out <- nlminb(start = strt.vals, objective = PDiSSFLogLike,
X1 = X.iSSF, X2 = X.p, locations = locations, k1 = k.iSSF,
k2 = k.p, maxLagArg = maxLagArg)
out
warnings()
X.iSSF
X.p
class(X.p)
locations
k.iSSF
k.p
X.iSSF
iSSF.coefs
k.iSSF
X.iSSF
PDiSSFLogLike <- function (beta, X1, X2, locations, k1, k2, maxLagArg) {
link <- function(x) {
exp(x)/(1 + exp(x))
}
iSSF.coefs <- beta[1:k1]
p.coefs <- t(t(beta[(k1 + 1):(k1 + k2)]))
ncells <- nrow(X1)
fix.attempts <- length(locations)
Lag <- rep(1, times = fix.attempts)
for (i in 3:fix.attempts) {
if (is.na(locations[i - 1]))
Lag[i] <- Lag[i - 1] + 1
}
detected <- !is.na(locations)
EXP <- matrix(0, nrow = ncells, ncol = ncells)
for (i in 1:k1) {
EXP <- EXP + X1[, (1 + (i - 1) * ncells):(i * ncells)] *
iSSF.coefs[i]
}
EXP <- exp(EXP)
sumEXP <- matrix(rowSums(EXP), nrow = ncells, ncol = ncells)
P <- link(X2 %*% p.coefs)
D <- (EXP/sumEXP) * matrix(P, nrow = ncells, ncol = ncells,
byrow = TRUE)
B <- (EXP/sumEXP) * matrix(1 - P, nrow = ncells, ncol = ncells,
byrow = TRUE)
if (max(Lag) > 1) {
B.s <- vector("list", max(Lag - 1))
B.s[[1]] <- diag(ncells)
B.s[[2]] <- B
if (max(Lag) > 2) {
for (j in 3:max(Lag - 1)) {
output <- B
if (length(3:j) > maxLagArg) {
numMults <- maxLagArg
}
else {
numMults <- length(3:j)
}
B.s[[j]] <- matrixCalcFastTwo(matrixOne = output,
multTimes = numMults,
matrixOfDiag = diag(1, ncells))
}
}
}
prob <- rep(NA, times = fix.attempts)
for (i in 2:fix.attempts) {
if (detected[i] & Lag[i] == 1) {
prob[i] <- D[locations[i - 1], locations[i]]
}
if (detected[i] & Lag[i] > 1) {
prob[i] <- B[locations[i - Lag[i]], ] %*% B.s[[Lag[i] -
1]] %*% D[, locations[i]]
}
}
-sum(log(prob), na.rm = TRUE)
# print(-sum(log(prob), na.rm = TRUE)) # if the log(prob) doesn't change it is hard to know if still working
# print(paste("Working (", round(runif(1, 0, 100), 0), ")")) # just to show something is working
}
out <- nlminb(start = strt.vals, objective = PDiSSFLogLike,
X1 = X.iSSF, X2 = X.p, locations = locations, k1 = k.iSSF,
k2 = k.p, maxLagArg = maxLagArg)
iSSF.coefs <- out$par[1:k.iSSF]
p.coefs <- out$par[(k.iSSF + 1):(k.iSSF + k.p)]
hessian <- F.2nd.deriv(out$par, PDiSSFLogLike, X1 = X.iSSF,
X2 = X.p, locations = locations, k1 = k.iSSF,
k2 = k.p, maxLagArg = maxLagArg)
out
PDiSSFLogLike <- function (beta, X1, X2, locations, k1, k2, maxLagArg) {
link <- function(x) {
exp(x)/(1 + exp(x))
}
iSSF.coefs <- beta[1:k1]
p.coefs <- t(t(beta[(k1 + 1):(k1 + k2)]))
ncells <- nrow(X1)
fix.attempts <- length(locations)
Lag <- rep(1, times = fix.attempts)
for (i in 3:fix.attempts) {
if (is.na(locations[i - 1]))
Lag[i] <- Lag[i - 1] + 1
}
detected <- !is.na(locations)
EXP <- matrix(0, nrow = ncells, ncol = ncells)
for (i in 1:k1) {
EXP <- EXP + X1[, (1 + (i - 1) * ncells):(i * ncells)] *
iSSF.coefs[i]
}
EXP <- exp(EXP)
sumEXP <- matrix(rowSums(EXP), nrow = ncells, ncol = ncells)
P <- link(X2 %*% p.coefs)
D <- (EXP/sumEXP) * matrix(P, nrow = ncells, ncol = ncells,
byrow = TRUE)
B <- (EXP/sumEXP) * matrix(1 - P, nrow = ncells, ncol = ncells,
byrow = TRUE)
if (max(Lag) > 1) {
B.s <- vector("list", max(Lag - 1))
B.s[[1]] <- diag(ncells)
B.s[[2]] <- B
if (max(Lag) > 2) {
for (j in 3:max(Lag - 1)) {
output <- B
if (length(3:j) > maxLagArg) {
numMults <- maxLagArg
}
else {
numMults <- length(3:j)
}
B.s[[j]] <- matrixCalcFastTwo(matrixOne = output,
multTimes = numMults,
matrixOfDiag = diag(1, ncells))
}
}
}
prob <- rep(NA, times = fix.attempts)
for (i in 2:fix.attempts) {
if (detected[i] & Lag[i] == 1) {
prob[i] <- D[locations[i - 1], locations[i]]
}
if (detected[i] & Lag[i] > 1) {
prob[i] <- B[locations[i - Lag[i]], ] %*% B.s[[Lag[i] -
1]] %*% D[, locations[i]]
}
}
-sum(log(prob), na.rm = TRUE)
# print(-sum(log(prob), na.rm = TRUE)) # if the log(prob) doesn't change it is hard to know if still working
cat(paste("Working (", round(runif(1, 0, 100), 0), ")")) # just to show something is working
}
out <- nlminb(start = strt.vals, objective = PDiSSFLogLike,
X1 = X.iSSF, X2 = X.p, locations = locations, k1 = k.iSSF,
k2 = k.p, maxLagArg = maxLagArg)
PDiSSFLogLike <- function (beta, X1, X2, locations, k1, k2, maxLagArg) {
link <- function(x) {
exp(x)/(1 + exp(x))
}
iSSF.coefs <- beta[1:k1]
p.coefs <- t(t(beta[(k1 + 1):(k1 + k2)]))
ncells <- nrow(X1)
fix.attempts <- length(locations)
Lag <- rep(1, times = fix.attempts)
for (i in 3:fix.attempts) {
if (is.na(locations[i - 1]))
Lag[i] <- Lag[i - 1] + 1
}
detected <- !is.na(locations)
EXP <- matrix(0, nrow = ncells, ncol = ncells)
for (i in 1:k1) {
EXP <- EXP + X1[, (1 + (i - 1) * ncells):(i * ncells)] *
iSSF.coefs[i]
}
EXP <- exp(EXP)
sumEXP <- matrix(rowSums(EXP), nrow = ncells, ncol = ncells)
P <- link(X2 %*% p.coefs)
D <- (EXP/sumEXP) * matrix(P, nrow = ncells, ncol = ncells,
byrow = TRUE)
B <- (EXP/sumEXP) * matrix(1 - P, nrow = ncells, ncol = ncells,
byrow = TRUE)
if (max(Lag) > 1) {
B.s <- vector("list", max(Lag - 1))
B.s[[1]] <- diag(ncells)
B.s[[2]] <- B
if (max(Lag) > 2) {
for (j in 3:max(Lag - 1)) {
output <- B
if (length(3:j) > maxLagArg) {
numMults <- maxLagArg
}
else {
numMults <- length(3:j)
}
B.s[[j]] <- matrixCalcFastTwo(matrixOne = output,
multTimes = numMults,
matrixOfDiag = diag(1, ncells))
}
}
}
prob <- rep(NA, times = fix.attempts)
for (i in 2:fix.attempts) {
if (detected[i] & Lag[i] == 1) {
prob[i] <- D[locations[i - 1], locations[i]]
}
if (detected[i] & Lag[i] > 1) {
prob[i] <- B[locations[i - Lag[i]], ] %*% B.s[[Lag[i] -
1]] %*% D[, locations[i]]
}
}
print(1)
-sum(log(prob), na.rm = TRUE)
}
out <- nlminb(start = strt.vals, objective = PDiSSFLogLike,
X1 = X.iSSF, X2 = X.p, locations = locations, k1 = k.iSSF,
k2 = k.p, maxLagArg = maxLagArg)
PDiSSFLogLike <- function (beta, X1, X2, locations, k1, k2, maxLagArg) {
link <- function(x) {
exp(x)/(1 + exp(x))
}
iSSF.coefs <- beta[1:k1]
p.coefs <- t(t(beta[(k1 + 1):(k1 + k2)]))
ncells <- nrow(X1)
fix.attempts <- length(locations)
Lag <- rep(1, times = fix.attempts)
for (i in 3:fix.attempts) {
if (is.na(locations[i - 1]))
Lag[i] <- Lag[i - 1] + 1
}
detected <- !is.na(locations)
EXP <- matrix(0, nrow = ncells, ncol = ncells)
for (i in 1:k1) {
EXP <- EXP + X1[, (1 + (i - 1) * ncells):(i * ncells)] *
iSSF.coefs[i]
}
EXP <- exp(EXP)
sumEXP <- matrix(rowSums(EXP), nrow = ncells, ncol = ncells)
P <- link(X2 %*% p.coefs)
D <- (EXP/sumEXP) * matrix(P, nrow = ncells, ncol = ncells,
byrow = TRUE)
B <- (EXP/sumEXP) * matrix(1 - P, nrow = ncells, ncol = ncells,
byrow = TRUE)
if (max(Lag) > 1) {
B.s <- vector("list", max(Lag - 1))
B.s[[1]] <- diag(ncells)
B.s[[2]] <- B
if (max(Lag) > 2) {
for (j in 3:max(Lag - 1)) {
output <- B
if (length(3:j) > maxLagArg) {
numMults <- maxLagArg
}
else {
numMults <- length(3:j)
}
B.s[[j]] <- matrixCalcFastTwo(matrixOne = output,
multTimes = numMults,
matrixOfDiag = diag(1, ncells))
}
}
}
prob <- rep(NA, times = fix.attempts)
for (i in 2:fix.attempts) {
if (detected[i] & Lag[i] == 1) {
prob[i] <- D[locations[i - 1], locations[i]]
}
if (detected[i] & Lag[i] > 1) {
prob[i] <- B[locations[i - Lag[i]], ] %*% B.s[[Lag[i] -
1]] %*% D[, locations[i]]
}
}
print(paste("Random Number", round(runif(0, 100), 0)))
-sum(log(prob), na.rm = TRUE)
}
out <- nlminb(start = strt.vals, objective = PDiSSFLogLike,
X1 = X.iSSF, X2 = X.p, locations = locations, k1 = k.iSSF,
k2 = k.p, maxLagArg = maxLagArg)
PDiSSFLogLike <- function (beta, X1, X2, locations, k1, k2, maxLagArg) {
link <- function(x) {
exp(x)/(1 + exp(x))
}
iSSF.coefs <- beta[1:k1]
p.coefs <- t(t(beta[(k1 + 1):(k1 + k2)]))
ncells <- nrow(X1)
fix.attempts <- length(locations)
Lag <- rep(1, times = fix.attempts)
for (i in 3:fix.attempts) {
if (is.na(locations[i - 1]))
Lag[i] <- Lag[i - 1] + 1
}
detected <- !is.na(locations)
EXP <- matrix(0, nrow = ncells, ncol = ncells)
for (i in 1:k1) {
EXP <- EXP + X1[, (1 + (i - 1) * ncells):(i * ncells)] *
iSSF.coefs[i]
}
EXP <- exp(EXP)
sumEXP <- matrix(rowSums(EXP), nrow = ncells, ncol = ncells)
P <- link(X2 %*% p.coefs)
D <- (EXP/sumEXP) * matrix(P, nrow = ncells, ncol = ncells,
byrow = TRUE)
B <- (EXP/sumEXP) * matrix(1 - P, nrow = ncells, ncol = ncells,
byrow = TRUE)
if (max(Lag) > 1) {
B.s <- vector("list", max(Lag - 1))
B.s[[1]] <- diag(ncells)
B.s[[2]] <- B
if (max(Lag) > 2) {
for (j in 3:max(Lag - 1)) {
output <- B
if (length(3:j) > maxLagArg) {
numMults <- maxLagArg
}
else {
numMults <- length(3:j)
}
B.s[[j]] <- matrixCalcFastTwo(matrixOne = output,
multTimes = numMults,
matrixOfDiag = diag(1, ncells))
}
}
}
prob <- rep(NA, times = fix.attempts)
for (i in 2:fix.attempts) {
if (detected[i] & Lag[i] == 1) {
prob[i] <- D[locations[i - 1], locations[i]]
}
if (detected[i] & Lag[i] > 1) {
prob[i] <- B[locations[i - Lag[i]], ] %*% B.s[[Lag[i] -
1]] %*% D[, locations[i]]
}
}
print(paste("Random Number", round(runif(1, 0, 100), 0)))
-sum(log(prob), na.rm = TRUE)
}
out <- nlminb(start = strt.vals, objective = PDiSSFLogLike,
X1 = X.iSSF, X2 = X.p, locations = locations, k1 = k.iSSF,
k2 = k.p, maxLagArg = maxLagArg)
rm(list = ls())
gc()
