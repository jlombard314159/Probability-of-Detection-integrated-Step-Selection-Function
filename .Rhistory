pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation", "elevation_2"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
head(habitat)
hist(habitat$elevation)
habitat$elev <- habitat$elevation - mean(habitat$elevation)
# iSSF --------------------------------------------------------------------
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elev"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
library(PDiSSF)
library(MDC)
data(habitat); head(habitat)
data(locations); head(locations)
mean(!is.na(locations$unitID))
rslts <- pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
# iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
rslts
library(PDiSSF)
library(PDiSSF)
library(MDC)
data(habitat); head(habitat)
data(locations); head(locations)
mean(!is.na(locations$unitID))
rslts <- pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
# iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
rslts
# iSSF --------------------------------------------------------------------
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
habitat$prctSageCentered <- habitat$prctSage - mean(habitat$prctSage)
habitat$elevationCentered <- habitat$elevation - mean(habitat$elevation)
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSageCentered", "elevationCentered"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
library(PDiSSF)
data(habitat)
data(locations)
habitat$prctSageCentered <- habitat$prctSage - mean(habitat$prctSage)
habitat$elevationCentered <- habitat$elevation - mean(habitat$elevation)
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSageCentered", "elevationCentered"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevationCentered"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
habitat$elevationCntrd <- habitat$elevation - mean(habitat$elevation)
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevationCntrd"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
library(PDiSSF)
data(habitat); head(habitat)
data(locations); head(locations)
mean(!is.na(locations$unitID))
rslts <- pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
# iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
rslts
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 10)
str(locations)
missing <- ifelse(is.na(locations$unitID), 1, 0)
nAttempts <- length(locations$unitID)
lags <- rep(0, nAttempts)
for(i in 2:nAttemts){
if(missing[i] == 0){
lags[i] <- missing[i] + missing[i-1]
} else {
lags[i] <- 0
}
}
lags <- rep(0, nAttempts)
for(i in 2:nAttempts){
if(missing[i] == 0){
lags[i] <- missing[i] + missing[i-1]
} else {
lags[i] <- 0
}
}
max(lags)
sum(missing)
missing <- ifelse(is.na(locations$unitID), 1, 0)
nAttempts <- length(locations$unitID)
lags <- rep(0, nAttempts)
for(i in 2:nAttempts){
if(missing[i] == 1){
lags[i] <- missing[i] + missing[i-1]
} else {
lags[i] <- 0
}
}
max(lags)
locations
missing
missing <- ifelse(is.na(locations$unitID), 1, 0)
nAttempts <- length(locations$unitID)
sinceFix <- rep(0, nAttempts)
for(i in 2:nAttempts){
if(missing[i] == 1){
sinceFix[i] <- missing[i] + missing[i-1]
} else {
sinceFix[i] <- 0
}
}
max(sinceFix)
sinceFix
missing <- ifelse(is.na(locations$unitID), 1, 0)
nAttempts <- length(locations$unitID)
sinceFix <- rep(0, nAttempts)
for(i in 2:nAttempts){
if(missing[i] == 1){
sinceFix[i] <- missing[i] + sinceFix[i-1]
} else {
sinceFix[i] <- 0
}
}
max(sinceFix)
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 4)
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 3)
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 2)
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 1)
library(PDiSSF)
data(habitat)
data(locations)
# Fix success rate
mean(!is.na(locations$unitID))
# Computing time for larger data sets may vary WIDELY
# integrated step selection function (iSSF) using step length
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
# error in hessian: NaN for SE of elevation
# center elevation to fix
habitat$elevationCntrd <- habitat$elevation - mean(habitat$elevation)
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevationCntrd"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
# PDiSSF with prctSage as covariate for probability of detection
# calculate maximum number consecutive missing locations
missing <- ifelse(is.na(locations$unitID), 1, 0)
nAttempts <- length(locations$unitID)
sinceFix <- rep(0, nAttempts)
for(i in 2:nAttempts){
if(missing[i] == 1){
sinceFix[i] <- missing[i] + sinceFix[i-1]
} else {
sinceFix[i] <- 0
}
}
max(sinceFix) # set maxLagArg to 3 or lower
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 3)
375/3174
375/(375+1664)
375+1664
2039/3174
1664/3174
<<<<<<< HEAD
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
=======
data(habitat)
data(locations)
# Fix success rate
mean(!is.na(locations$unitID))
# Computing time for larger data sets may vary WIDELY
# integrated step selection function (iSSF) using step length
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
# error in hessian: NaN for SE of elevation
library(PDiSSF)
data(habitat)
data(locations)
# Fix success rate
mean(!is.na(locations$unitID))
# Computing time for larger data sets may vary WIDELY
# integrated step selection function (iSSF) using step length
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
# error in hessian: NaN for SE of elevation
missing <- ifelse(is.na(locations$unitID), 1, 0)
nAttempts <- length(locations$unitID)
sinceFix <- rep(0, nAttempts)
for(i in 2:nAttempts){
if(missing[i] == 1){
sinceFix[i] <- missing[i] + sinceFix[i-1]
} else {
sinceFix[i] <- 0
}
}
max(sinceFix) # set maxLagArg to 3 or lower
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 3)
library(PDiSSF)
?PDiSSF
?locations
library(PDiSSF)
?pdissf
library(PDiSSF)
?pdissf
library(PDiSSF)
?pdissf
library(PDiSSF)
?pdissf
library(PDiSSF)
library(PDiSSF)
?pdissf
library(PDiSSF)
?pdissf
library(PDiSSF)
?pdissf
library(PDiSSF)
?pdissf
library(PDiSSF)
library(PDiSSF)
?pdissf
library(PDiSSF)
?pdissf
summary(habitat)
data("habitat")
summary(habitat)
data("locations")
summary(locations)
a <- 1:1000
b <- sample(a, 10, replace = TRUE)
b
a <- 1:10
b <- sample(a, 10, replace = TRUE)
b
sum(b %in% a)
b <- b + 13
sum(b %in% a)
b <- sample(a, 10, replace = TRUE)
b <- c(b, 13)
sum(b %in% a)
?clock
Sys.time()
for(i in 1:1000){
print(paste(i, "\r"))
}
for(i in 1:1000){
print(paste(i, " \r"))
}
for(i in 1:1000){
paste(i, " \r")
}
for(i in 1:1000){
cat(paste(i, " \r"))
}
for(i in 1:10000000){
cat(paste(i, " \r"))
}
<<<<<<< Updated upstream
>>>>>>> ad0f5e79d574f06ab8ebeddae37ee6bb869d2db6
remove.packages("PDiSSF", lib="~/R/win-library/4.1")
install.packages("~/Personal Coding/R/RSF/PDiSSF_1.0.1.zip", repos = NULL, type = "win.binary")
## Not run:
library(PDiSSF)
data(habitat)
data(locations)
head(habitat)
ls()
head(locations)
locations$unitID
head(habitat)
x <- c(1,2,3,4,5,6)
y <- c(1,2,3,4,5,10)
y <- c(1,2,3,4,5,10,2,3,3,4,3,4,5,2,3,4)
x
y
any(!(x %in% y))
any((x %in% y))
x %in% y
!(x %in% y)
any(c(TRUE,TRUE))
any(c(TRUE,FALSE))
# Standard conditional logistic, if distColumn = NULL.
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("prctSage", "elevation"),
probDetCovars = NULL)
noNACellID <- CellID[!is.na(CellID)]
idMismatch <- any(!(habitatDF[,habitatCellID] %in% CellID))
habitatCellID = 'unitID'
idMismatch <- any(!(habitatDF[,habitatCellID] %in% CellID))
noNACellID
CellID
habitatDF
noNACellID <- CellID[!is.na(CellID)]
idMismatch <- any(!(noNACellID %in% habitatDF[,habitatCellID]))
idMismatch
noNACellID
noNACellID <- unique(CellID[!is.na(CellID)])
noNACellID
any(!(noNACellID %in% habitatDF[,habitatCellID]))
noNACellID <- c(noNACellID,20020202)
noNACellID
idMismatch <- any(!(noNACellID %in% habitatDF[,habitatCellID]))
idMismatch
noNACellID %in% habitatDF[,habitatCellID])
noNACellID %in% habitatDF[,habitatCellID]
noNACellID <- unique(CellID[!is.na(CellID)])
locationNotInHabitat <- noNACellID %in% habitatDF[,habitatCellID]
idMismatch <- any(!locationNotInHabitat)
idMismatch
errorMessage <- paste("at least one CellID does not match any of the habitatIDs. /n
Check the following IDs: ",
noNACellID[locationNotInHabitat])
errorMessage
locationNotInHabitat
noNACellID <- unique(CellID[!is.na(CellID)])
locationNotInHabitat <- noNACellID %in% habitatDF[,habitatCellID]
locationNotInHabitat
idMismatch <- any(!locationNotInHabitat)
idMismatch
noNACellID <- c(noNACellID,10202040)
noNACellID
locationNotInHabitat <- noNACellID %in% habitatDF[,habitatCellID]
locationNotInHabitat
idMismatch <- any(!locationNotInHabitat)
idMismatch
noNACellID[locationNotInHabitat]
locationNotInHabitat
noNACellID[!locationNotInHabitat]
errorMessage <- paste("at least one CellID does not match any of the habitatIDs. /n
Check the following IDs: ",
noNACellID[!locationNotInHabitat])
errorMessage
errorMessage <- paste("at least one CellID does not match any of the habitatIDs. Check the following IDs: ",
noNACellID[!locationNotInHabitat])
errorMessage
habitat
'bob' %in% colnames(habitatDF)
'bob' %in% colnames(habitat)
devtools::document()
remove.packages("PDiSSF", lib="~/R/win-library/4.1")
install.packages("~/Personal Coding/R/RSF/PDiSSF_1.0.2.zip", repos = NULL, type = "win.binary")
## Not run:
library(PDiSSF)
=======
library(PDiSSF)
?pdissf
>>>>>>> Stashed changes
data(habitat)
data(locations)
# Fix success rate
mean(!is.na(locations$unitID))
<<<<<<< Updated upstream
# Standard conditional logistic, if distColumn = NULL.
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("prctSage", "elevation"),
probDetCovars = NULL)
devtools::document()
devtools::document()
remove.packages("PDiSSF", lib="~/R/win-library/4.1")
install.packages("~/Personal Coding/R/RSF/PDiSSF_1.0.2.zip", repos = NULL, type = "win.binary")
## Not run:
library(PDiSSF)
data(habitat)
data(locations)
# Fix success rate
mean(!is.na(locations$unitID))
# Standard conditional logistic, if distColumn = NULL.
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("prctSage", "elevation"),
probDetCovars = NULL)
=======
# Computing time for larger data sets may vary WIDELY
# integrated step selection function (iSSF) using step length
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
habitatDF = habitat
CellID = locations$unitID
CellID
iSSFCovars = c("distance", "prctSage", "elevation")
probDetCovars = "prctSage
"
probDetCovars = "prctSage"
distColumns = c("utmX","utmY")
nCells <- nrow(habitatDF)
if (!is.data.frame(habitatDF)) {
stop(paste("habitatDF should be a data frame."))
}
notNAs <- sum(!is.na(CellID))
notNAs
dim(locations)
sum(CellID %in% habitatDF$CellID) !=  notNAs
sum(CellID %in% habitatDF$CellID)
names(habitat)
names(CellID)
CellID
# RN
#
# working directory
wd <- "C:/Users/rynie/Documents/EEI/Meadow Creek"
# libraries
source(paste0(wd, "/Code/libraries.r"))
# year
yr <- 2020
# Locations ---------------------------------------------------------------
load(paste0(wd, "/Data/Full_Data_", yr, ".RData"))
locs <- Full_Data
locs <- subset(locs, bad_loc >= -9)
locs <- subset(locs, pasture >= 1)
locs <- subset(locs, pasture != -999)
# Covariates on grid ------------------------------------------------------
covars <- read.csv(paste0(wd, "/Data/GIS/MCShapefiles_20210910/MC_TopoAndPDist_v2.csv"), as.is = TRUE)
>>>>>>> Stashed changes
library(PDiSSF)
?PDiSSF
library(PDiSSF)
?pdissf
library(PDiSSF)
?pdissf
library(PDiSSF)
data(habitat)
data(locations)
# Fix success rate
mean(!is.na(locations$unitID))
# Computing time for larger data sets may vary WIDELY
# integrated step selection function (iSSF) using step length
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
habitat$elevationCntrd <- habitat$elevation - mean(habitat$elevation)
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevationCntrd"),
probDetCovars = NULL,
distColumns = c("utmX","utmY"))
missing <- ifelse(is.na(locations$unitID), 1, 0)
nAttempts <- length(locations$unitID)
sinceFix <- rep(0, nAttempts)
for(i in 2:nAttempts){
if(missing[i] == 1){
sinceFix[i] <- missing[i] + sinceFix[i-1]
} else {
sinceFix[i] <- 0
}
}
max(sinceFix)
pdissf(habitatDF = habitat,
CellID = locations$unitID,
iSSFCovars = c("distance", "prctSage", "elevation"),
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 3)
