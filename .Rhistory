library(PDiSSF)
library(PDiSSF)
data(habitat); head(habitat)
data(locations); head(locations)
mean(!is.na(locations$unitID))
# PDRSF including step length
start.time <- Sys.time()
PDiSSF(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prcnt.sage", "elevation"),
iSSFCovars = c("prcnt.sage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prcnt.sage", distColumns = c("utmX","utmY"), maxLagArg = 9)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Sys.time() - start.time
# PDRSF including step length
start.time <- Sys.time()
PDiSSF(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prcnt.sage", "elevation"),
iSSFCovars = c("prcnt.sage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prcnt.sage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
?PDiSSF
library(PDiSSF)
?PDiSSF
library(PDiSSF)
?PDiSSF
?`PDiSSF-package`
?PDiSSF
library(PDiSSF)
?PDiSSF
?PDiSSF
library(PDiSSF)
?PDiSSF
library(PDiSSF)
?PDiSSF
?PDiSSF
library(PDiSSF)
?`PDiSSF-package`
library(PDiSSF)
library(PDiSSF)
?pdissf
?PDiSSF
str(habitat)
data(habitat)
str(habitat)
range(habitat$elevation)
start.time <- Sys.time()
PDiSSF(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prcnt.sage", "elevation"),
iSSFCovars = c("prcnt.sage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
start.time <- Sys.time()
pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prcnt.sage", "elevation"),
iSSFCovars = c("prcnt.sage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
data(locations); head(locations)
data(habitat); head(habitat)
# PDRSF including step length
start.time <- Sys.time()
data(habitat); head(habitat)
data(locations); head(locations)
mean(!is.na(locations$unitID))
# PDRSF including step length
start.time <- Sys.time()
pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prcnt.sage", "elevation"),
iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
function (x, i, j, drop = if (missing(i)) TRUE else length(cols) ==
1)
start.time <- Sys.time()
pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prcnt.sage", "elevation"),
iSSFCovars = c("prcnt.sage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prcnt.sage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
# PDRSF including step length
start.time <- Sys.time()
pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prcnt.sage", "elevation"),
iSSFCovars = c("prcnt.sage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prcnt.sage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
habitat$prctSage <- habitat$prcnt.sage
# PDRSF including step length
start.time <- Sys.time()
pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prcnt.sage", "elevation"),
iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
str(habitat)
tmp <- data.frame(prctSage = min(habitat$prctSage):max(habitat$prctSage))
head(tmp)
rslts <- pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prcnt.sage", "elevation"),
iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
rslts$Detection
F.logit <- function(int, beta, x){
exp(int + beta*x) / (1 + exp(int + beta*x))
}
tmp <- data.frame(prctSage = min(habitat$prctSage):max(habitat$prctSage))
tmp$pDetect <- F.logit(rslts$Detection[1,1], rslts$Detection[2,1], tmp$prctSage)
class(tmp$prctSage)
rslts$Detection[1,1]
tmp$pDetect <- F.logit(rslts$Detection[1,2], rslts$Detection[2,2], tmp$prctSage)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()
library(ggplot2)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
ylim(0, 1)
tmp <- data.frame(prctSage = habitat$prctSage))
tmp <- data.frame(prctSage = habitat$prctSage)
tmp$pDetect <- F.logit(rslts$Detection[1,2], rslts$Detection[2,2], tmp$prctSage)
library(ggplot2)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
ylim(0, 1)
tmp <- data.frame(prctSage = habitat$prctSage)
tmp$pDetect <- F.logit(rslts$Detection[1,2], rslts$Detection[2,2], tmp$prctSage)
library(ggplot2)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
ylim(0, 1)
# For PDiSSF
habitatDF = habitat
habitat$elevation <- habitat$elevation / 1000
# PDRSF including step length
start.time <- Sys.time()
rslts <- pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prctSage", "elevation"),
iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
data(habitat); head(habitat)
habitat$prctSage <- habitat$prcnt.sage
habitat$elevation <- habitat$elevation * 1000
# PDRSF including step length
start.time <- Sys.time()
rslts <- pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prctSage", "elevation"),
iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
F.logit <- function(int, beta, x){
exp(int + beta*x) / (1 + exp(int + beta*x))
}
tmp <- data.frame(prctSage = habitat$prctSage)
tmp$pDetect <- F.logit(rslts$Detection[1,2], rslts$Detection[2,2], tmp$prctSage)
library(ggplot2)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
ylim(0, 1)
rslts
data(habitat); head(habitat)
habitat$prctSage <- habitat$prcnt.sage
start.time <- Sys.time()
rslts <- pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prctSage", "elevation"),
iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
rslts
exp(-6)
exp(-6.58)-1
exp(-0.009969)-1
(exp(-0.009969)-1)*100
(exp(-6.58)-1)*100
data(habitat); head(habitat)
habitat$prctSage <- habitat$prcnt.sage
habitat$elevation <- habitat$elevation * 1000
rslts <- pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prctSage", "elevation"),
iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
rslts
save(habitat, file = "C:/Users/rynie/Documents/EEI/PDiSSF/PDiSSF/data/habitat.RData")
data(habitat); head(habitat)
habitat$prctSage <- habitat$prcnt.sage
save(habitat, file = "C:/Users/rynie/Documents/EEI/PDiSSF/PDiSSF/data/habitat.RData")
data(habitat); head(habitat)
habitat$prctSage <- habitat$prcnt.sage
head(habitat)
data(habitat); head(habitat)
library(dplyr)
rename(habitat, prctSage = prcnt.sage)
str(habitat)
habitat <- rename(habitat, prctSage = prcnt.sage)
str(habitat)
save(habitat, file = "C:/Users/rynie/Documents/EEI/PDiSSF/PDiSSF/data/habitat.RData")
data(habitat); head(habitat)
load("~/EEI/PDiSSF/PDiSSF/data/habitat.RData")
head(habitat)
library(PDiSSF)
data(habitat); head(habitat)
data(locations); head(locations)
mean(!is.na(locations$unitID))
start.time <- Sys.time()
rslts <- pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prctSage", "elevation"),
iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
F.logit <- function(int, beta, x){
exp(int + beta*x) / (1 + exp(int + beta*x))
}
tmp <- data.frame(prctSage = habitat$prctSage)
tmp$pDetect <- F.logit(rslts$Detection[1,2], rslts$Detection[2,2], tmp$prctSage)
library(ggplot2)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
ylim(0, 1)
rslts
head(locations)
head(locations, 100)
View(locations)
?ggplot2
library(PDiSSF)
?PDiSSF
library(PDiSSF)
?PDiSSF
?pdissf
?habitat
?locations
library(PDiSSF)
library(PDiSSF)
?PDiSSF
?ggplot2
library(PDiSSF)
?PDiSSF
library(PDiSSF)
?PDiSSF
library(PDiSSF)
?pdissf
library(PDiSSF)
?PDiSSF
library(PDiSSF)
library(PDiSSF)
library(PDiSSF)
data(habitat); head(habitat)
data(locations); head(locations)
mean(!is.na(locations$unitID))
# library(dplyr)
# habitat <- rename(habitat, prctSage = prcnt.sage)
# save(habitat, file = "C:/Users/rynie/Documents/EEI/PDiSSF/PDiSSF/data/habitat.RData")
# PDRSF including step length
start.time <- Sys.time()
rslts <- pdissf(habitatDF = habitat,
CellID = locations$unitID,
# iSSFCovars = c("distance", "prctSage", "elevation"),
iSSFCovars = c("prctSage", "elevation", "distance"), # MUST BE "distance"
probDetCovars = "prctSage", distColumns = c("utmX","utmY"), maxLagArg = 9)
Sys.time() - start.time
rslts
F.logit <- function(int, beta, x){
exp(int + beta*x) / (1 + exp(int + beta*x))
}
tmp <- data.frame(prctSage = habitat$prctSage)
tmp$pDetect <- F.logit(rslts$Detection[1,2], rslts$Detection[2,2], tmp$prctSage)
library(ggplot2)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
ylim(0, 1)
tmp <- habitat
tmp$pDetect <- F.logit(rslts$Detection[1,2], rslts$Detection[2,2], habitat$prctSage)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
geom_point()+
ylim(0, 1)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
geom_point(habitat, aes(prctSage)+
ylim(0, 1)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
geom_point(habitat, aes(prctSage))+
ylim(0, 1)
tmp <- habitat
tmp$pDetect <- F.logit(rslts$Detection[1,2], rslts$Detection[2,2], habitat$prctSage)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
ylim(0, 1)
tmp <- habitat
tmp$pDetect <- F.logit(rslts$Detection[1,2], rslts$Detection[2,2], tmp$prctSage)
ggplot(tmp, aes(prctSage, pDetect))+
geom_line()+
ylim(0, 1)
ggplot(tmp, aes(prctSage, pDetect))+
geom_point()+
ylim(0, 1)
hist(tmp$prctSage)
unique(tmp$prctSage)
?PDiSSF
help(habitat)
library(PDiSSF)
library(PDiSSF)
